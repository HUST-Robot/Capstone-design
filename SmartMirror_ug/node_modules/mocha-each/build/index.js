'use strict';

var _sprintfJs = require('sprintf-js');

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

module.exports = forEach;

/**
 * Defines Mocha test cases for each given parameter.
 * @param {Array} parameters
 * @param {function} defaultIt - The 'it' function used in this function.
 *     If omitted, 'it' in global name space is used.
 * @return {Object} The object which has a method to define test cases.
 */
function forEach(parameters) {
  var defaultIt = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : global.it;

  var it = makeTestCaseDefiner(parameters, defaultIt);
  it.skip = makeParameterizedSkip(parameters, defaultIt);
  it.only = makeParameterizedOnly(parameters, defaultIt);
  return { it: it };
}

/**
 * Create a function which define parameterized tests
 * to be ignored.
 * @private
 */
function makeParameterizedSkip(parameters, defaultIt) {
  return makeTestCaseDefiner(parameters, defaultIt ? defaultIt.skip : undefined);
}

/**
 * Create a function which define exclusive parameterized tests.
 * @private
 */
function makeParameterizedOnly(parameters, defaultIt) {
  return function (title, test) {
    var it = makeTestCaseDefiner(parameters, defaultIt);
    global.describe.only('', function () {
      return it(title, test);
    });
  };
}

/**
 * Create a function which defines test cases for
 * each given parameter.
 * @private
 */
function makeTestCaseDefiner(parameters, it) {
  return function defineTestCases(title, test) {
    var makeTitle = typeof title === 'function' ? title : function () {
      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return (0, _sprintfJs.vsprintf)(title, args);
    };

    var arrayParams = parameters.map(function (param) {
      return Array.isArray(param) ? param : [param];
    });

    var isAsync = isAsyncTest(arrayParams, test);
    arrayParams.forEach(function (param, index) {
      it(makeTitle.apply(undefined, [].concat(_toConsumableArray(param), [index])), makeTestBody(param, test, isAsync));
    });
  };
}

/**
 * Wrap a given test function and convert it to
 * a function passed to the `it`.
 * @private
 */
function makeTestBody(param, test, isAsync) {
  if (isAsync) {
    return function (done) {
      test.apply(this, param.concat(done));
    };
  }
  return function () {
    return test.apply(this, param);
  };
}

/**
 * Return true if the testBody seems to be async.
 * @private
 */
function isAsyncTest(parameters, test) {
  var nLongestParam = parameters.reduce(function (n, param) {
    return Math.max(n, param.length);
  }, 0);
  return nLongestParam < test.length;
}