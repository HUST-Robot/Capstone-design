'use strict';

/**
  * Provides methods for easy access to note data.
  * @module services/Notes
  * @extends module:services/AuthenticatedService
  * @requires module:services/AuthenticatedService

  * @example <caption>Create an instance of the Notes service</caption>
    var NotesService = require('services/Notes');
    var notes = new NotesService();

  * @example <caption>Get notes for a task</caption>
    var taskID = 78987;
    notes.forTask(taskID)
      .done(function (notesData, statusCode) {
        // ...
      })
      .fail(function (resp, code) {
        // ...
      });

  * @example <caption>Get notes for a list</caption>
    var listID = 87987;
    notes.forList(listID)
      .done(function (notesData, statusCode) {
        // ...
      })
      .fail(function (resp, code) {
        // ...
      });

  * @example <caption>Get a specific note</caption>
    var noteID = 34958737;
    notes.getID(noteID)
      .done(function (noteData, statusCode) {
        // ...
      })
      .fail(function (resp, code) {
        // ...
      });

  * @example <caption>Create a note</caption>
    var noteData = {
      'task_id': 458748574,
      'content': '2 + 2 = 5'
    };
    notes.create(noteData)
      .done(function (noteData, statusCode) {
        // ...
      })
      .fail(function (resp, code) {
        // ...
      });

  * @example <caption>Delete a note</caption>
    var noteID = 3487348374;
    var revision = 45;
    notes.deleteID(noteID, revision)
      .always(function (resp, statusCode) {
        // ...
      });
  */

var AuthenticatedService = require('./AuthenticatedService');

module.exports = AuthenticatedService.extend({
  'baseUrl': '/notes',
  'type': 'note',

  /**
    * Allows fetching notes for a list.
    * @param {string} listId - The list to fetch.
    * @param {boolean} [completed] - Fetch notes under completed tasks when TRUE
    * @param {string} [requestID] - User supplied Request ID. Autogenerated if not supplied.
    */
  'forList': function (listId, completed, requestID) {

    var self = this;

    var request = self.get(self.baseUrl, {
      'list_id': listId,
      'completed_tasks': !!completed
    }, requestID);

    return request.promise();
  },
});
