'use strict';

/**
  * Provides methods for easy access to tasks data.
  * @module services/Tasks
  * @extends module:services/AuthenticatedService
  * @requires module:services/AuthenticatedService

  * @example <caption>Create an instance of the Tasks service</caption>
    var TasksService = require('services/Tasks');
    var tasks = new TasksService();

  * @example <caption>Get all uncompleted tasks for a list</caption>
    var listID = 666;
    tasks.forList(listID)
      .done(function (tasksData, statusCode) {
        // ...
      })
      .fail(function (resp, code) {
        // ...
      });

  * @example <caption>Get completed tasks for a list</caption>
    var listID = 3456;
    var completed = true;
    tasks.forList(listID, completed)
      .done(function (tasks, statusCode) {
        // ...
      })
      .fail(function (resp, code) {
        // ...
      });

  * @example <caption>Get a specific task</caption>
    vat taskID = 777;
    tasks.getID(taskID)
      .done(function (taskData, statusCode) {
        // ...
      })
      .fail(function (resp, code) {
        // ...
      });

  * @example <caption>Create a task</caption>
    tasks.create({
      'list_id': 8675309
      'title': 'Call Jenny'
    })
    .done(function (taskData, statusCode) {
      // ...
    })
    .fail(function (resp, code) {
      // ...
    });

  * @example <caption>Update a task</caption>
    var taskID = 777;
    var taskRevision = 5;
    var updateData = {
      'title': 'Change the world',
      'starred': true,
      'due_data': undefined
    };

    tasks.update(taskID, revision, updateData)
      .done(function (taskData, statusCode) {
        // ...
      })
      .fail(function (resp, code) {
        // ...
      });

  * @example <caption>Delete a task</caption>
    var taskID = 777;
    var taskRevision = 5;
    tasks.deleteID(taskID, taskRevision)
      .always(function (resp, code) {
        // ...
      });
  */

var core = require('wunderbits.core');
var assert = core.lib.assert;
var WBDeferred = core.WBDeferred;
var MagiConsole = require('magiconsole');
var localConsole = new MagiConsole('SDK:SERVICE:TASKS');

var AuthenticatedService = require('./AuthenticatedService');

var _super = AuthenticatedService.prototype;
module.exports = AuthenticatedService.extend({

  'baseUrl': '/tasks',

  'type': 'task',

  /**
    * Allows fetching either all or just uncompleted tasks for a list.
    * @param {string} listId - The list to fetch.
    * @param {boolean} completed - Fetch completed tasks or not.
    * @param {string} [requestID] - User supplied Request ID. Autogenerated if not supplied.
    */
  'forList': function (listId, completed, requestID) {

    var self = this;

    var request = self.get(self.baseUrl, {

      'list_id': listId,
      'completed': !!completed
    }, requestID);

    return request.promise();
  },

  /**
    * Create a task.
    * @param {object} data - Task data.
    * @param {integer} data.list_id - List ID in which to create task.
    * @param {string} data.title - Task title.
    * @param {integer} [data.assignee_id] - User task is assigned to.
    * @param {boolean} [data.completed] - Is task completed?
    * @param {string} [data.due_date] - Task due date formatted as an ISO8601 date.
    * @param {boolean} [data.starred] - Is task starred?
    * @param {string} [requestID] - User supplied Request ID. Autogenerated if not supplied.
    * @returns {promise} Promise of request deferred.
    */
  'create': function (data) {

    var self = this;
    try {
      self.validateCreateData(data);
    }
    catch (e) {
      localConsole.error(e);
      return new WBDeferred().reject({
        'errors': [e.toString()]
      }, 0).promise();
    }

    var request = _super.create.apply(self, arguments);
    return request.promise();
  },

  /**
    * Validates task creation data.
    * @param {object} data - Task data.
    */
  'validateCreateData': function (data) {

    data = data || {};

    var hasData = Object.keys(data).length;
    var required = ' required for task creation';
    assert(hasData, 'data' + required);
    assert.number(data.list_id, 'data.list_id' + required);
    assert.string(data.title, 'data.title' + required);
  }
});
