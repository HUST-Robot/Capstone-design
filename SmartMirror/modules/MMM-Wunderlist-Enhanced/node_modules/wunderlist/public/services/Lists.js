'use strict';

/**
  * Provides methods for easy access to list data.
  * @module services/Lists
  * @extends module:services/AuthenticatedService
  * @requires module:services/AuthenticatedService

  * @example <caption>Create an instance of the Lists service</caption>
    var ListsService = require('services/Lists');
    var lists = new ListsService();

  * @example <caption>Get all lists for a user_id</caption>
    var userID = 984587;
    lists.forUser(listID)
      .done(function (listData, statusCode) {
        // ...
      })
      .fail(function (resp, code) {
        // ...
      });

  * @example <caption>Get a specific list</caption>
    vat listID = 777;
    lists.getID(listID)
      .done(function (listData, statusCode) {
        // ...
      })
      .fail(function (resp, code) {
        // ...
      });

  * @example <caption>Create a list</caption>
    lists.create({
      'title': 'Bad Movies'
    })
    .done(function (listData, statusCode) {
      // ...
    })
    .fail(function (resp, code) {
      // ...
    });

  * @example <caption>Update a list</caption>
    var listID = 777;
    var listRevision = 5;
    var updateData = {
      'title': 'Good Bad Movies',
    };

    lists.update(listID, listRevision, updateData)
      .done(function (listData, statusCode) {
        // ...
      })
      .fail(function (resp, code) {
        // ...
      });

  * @example <caption>Delete a list</caption>
    var listID = 777;
    var listRevision = 5;
    lists.deleteID(listID, listRevision)
      .always(function (resp, code) {
        // ...
      });
  */

var core = require('wunderbits.core');
var assert = core.lib.assert;
var WBDeferred = core.WBDeferred;
var MagiConsole = require('magiconsole');
var localConsole = new MagiConsole('SDK:SERVICE:LISTS');

var MembershipsService = require('./Memberships');
var AuthenticatedService = require('./AuthenticatedService');

var _super = AuthenticatedService.prototype;
module.exports = AuthenticatedService.extend({

  'baseUrl': '/lists',

  'type': 'list',


  'initialize': function (options) {

    var self = this;
    _super.initialize.apply(self, arguments);

    self.membershipsService = new MembershipsService(options);
  },

  /**
    * Create a list.
    * @param {object} data - List creation data.
    * @param {string} data.title - List title.
    * @param {string} [requestID] - User supplied Request ID. Autogenerated if not supplied.
    * @returns {promise} Promise of request deferred.
    */
  'create': function (data) {

    var self = this;
    try {
      self.validateCreateData(data);
    }
    catch (e) {
      localConsole.error(e);
      return new WBDeferred().reject({
        'errors': [e.toString()]
      }, 0).promise();
    }

    var request = _super.create.apply(self, arguments);
    return request.promise();
  },

  /**
    * Returns current user's accepted lists only
    */
  'accepted': function () {

    var self = this;
    var deferred = new WBDeferred();

    self.membershipsService.mine()
      .done(function (myMemberships) {

        var acceptedMemberships = myMemberships.filter(function (membership) {

          return membership.state === 'accepted';
        });

        var acceptedIDs = acceptedMemberships.map(function (acceptedMembership) {

          return acceptedMembership.list_id;
        });

        self.all()
          .done(function (allLists) {

            var myLists = allLists.filter(function (list) {

              return acceptedIDs.indexOf(list.id) > -1;
            });

            deferred.resolve(myLists);
          })
          .fail(deferred.reject, deferred);
      })
      .fail(deferred.reject, deferred);

    return deferred.promise();
  },

  /**
    * Validates subtask creation data.
    * @param {object} data - Subtask data.
    */
  'validateCreateData': function (data) {

    data = data || {};
    assert(data.title, 'Title is required for list creation.');
  }
});
