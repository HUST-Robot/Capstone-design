'use strict';

/**
  * Provides methods for easy access to task positions.
  * @module services/SubtaskPositions
  * @extends module:services/AuthenticatedService
  * @requires module:services/AuthenticatedService

  * @example <caption>Create an instance of the SubtaskPositions service</caption>
    var SubtaskPositionsService = require('services/SubtaskPositions');
    var subtaskPositions = new SubtaskPositionsService();

  * @example <caption>Get positions for a task's subtasks</caption>
    var taskID = 123987;
    subtaskPositions.forTask(taskID)
      .done(function (subtaskPositionsData, statusCode) {
        // ...
      })
      .fail(function (resp, code) {
        // ...
      });

  * @example <caption>Get subtasks positions for all tasks in a list</caption>
    var listID = 123987;
    subtaskPositions.forList(listID)
      .done(function (subtaskPositionsData, statusCode) {
        // ...
      })
      .fail(function (resp, code) {
        // ...
      });

  * @example <caption>Get a specific subtask position object</caption>
    var subtaskPositionID = 239487;
    subtaskPositions.getID(subtaskPositionID)
      .done(function (subtaskPositionData, statusCode) {
        // ...
      })
      .fail(function (resp, code) {
        // ...
      });

  * @example <caption>Update positions for a task's subtasks</caption>
    var subtaskPositionsID = 349587;
    var subtaskPositionsRevision = 23;
    var updateData = {
      'values': [2234,45645,76567,567978]
    };
    subtaskPositions.update(subtaskPositionsID, subtaskPositionsRevision, updateData)
      .done(function (subtaskPositionsData, statusCode) {
        // ...
      })
      .fail(function (resp, code) {
        // ...
      });
  */

var AuthenticatedService = require('./AuthenticatedService');

module.exports = AuthenticatedService.extend({
  'baseUrl': '/subtask_positions',
  'type': 'subtask_position',

  /**
    * Allows fetching subtask_positions for a list.
    * @param {string} listId - The list to fetch.
    * @param {boolean} [completed] - Fetch subtask_positions under completed tasks when TRUE
    * @param {string} [requestID] - User supplied Request ID. Autogenerated if not supplied.
    */
  'forList': function (listId, completed, requestID) {

    var self = this;

    var request = self.get(self.baseUrl, {
      'list_id': listId,
      'completed_tasks': !!completed
    }, requestID);

    return request.promise();
  },
});
