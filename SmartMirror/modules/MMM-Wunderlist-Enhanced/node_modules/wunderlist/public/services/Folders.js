'use strict';

/**
 * Provides methods for easy access to folder data.
 * @module services/Folder
 * @extends module:services/AuthenticatedService
 * @requires module:services/AuthenticatedService

 * @example <caption>Create an instance of the Folders service</caption>
 var FolderService = require('services/Folders');
 var folders = new FolderService();

 * @example <caption>Get all folders for a user_id</caption>
 var userID = 984587;
 folders.forUser(userID)
 .done(function (folderData, statusCode) {
        // ...
      })
 .fail(function (resp, code) {
        // ...
      });

 * @example <caption>Get a specific folder</caption>
 vat folderID = 777;
 folders.getID(folderID)
 .done(function (folderData, statusCode) {
        // ...
      })
 .fail(function (resp, code) {
        // ...
      });

 * @example <caption>Create a folder</caption>
 folders.create({
      'title': 'Bad Movies'
    })
 .done(function (folderData, statusCode) {
      // ...
    })
 .fail(function (resp, code) {
      // ...
    });

 * @example <caption>Update a folder</caption>
 var folderID = 777;
 var folderRevision = 5;
 var updateData = {
      'title': 'Good Bad Movies',
    };

 folders.update(folderID, folderRevision, updateData)
 .done(function (folderData, statusCode) {
        // ...
      })
 .fail(function (resp, code) {
        // ...
      });

 * @example <caption>Delete a folder</caption>
 var folderID = 777;
 var folderRevision = 5;
 folders.deleteID(folderID, folderRevision)
 .always(function (resp, code) {
        // ...
      });
 */

var core = require('wunderbits.core');
var assert = core.lib.assert;
var WBDeferred = core.WBDeferred;
var MagiConsole = require('magiconsole');
var localConsole = new MagiConsole('SDK:SERVICE:FOLDERS');

var MembershipsService = require('./Memberships');
var AuthenticatedService = require('./AuthenticatedService');

var _super = AuthenticatedService.prototype;
module.exports = AuthenticatedService.extend({

    'baseUrl': '/folders',

    'type': 'folder',


    'initialize': function (options) {

        var self = this;
        _super.initialize.apply(self, arguments);

        self.membershipsService = new MembershipsService(options);
    },

    /**
     * Create a folder.
     * @param {object} data - Folder creation data.
     * @param {string} data.title - Folder title.
     * @param {string} [requestID] - User supplied Request ID. Autogenerated if not supplied.
     * @returns {promise} Promise of request deferred.
     */
    'create': function (data) {

        var self = this;
        try {
            self.validateCreateData(data);
        }
        catch (e) {
            localConsole.error(e);
            return new WBDeferred().reject({
                'errors': [e.toString()]
            }, 0).promise();
        }

        var request = _super.create.apply(self, arguments);
        return request.promise();
    },

    /**
     * Returns current user's accepted folders only
     */
    'accepted': function () {

        var self = this;
        var deferred = new WBDeferred();

        self.membershipsService.mine()
            .done(function (myMemberships) {

                var acceptedMemberships = myMemberships.filter(function (membership) {

                    return membership.state === 'accepted';
                });

                var acceptedIDs = acceptedMemberships.map(function (acceptedMembership) {

                    return acceptedMembership.folder_id;
                });

                self.all()
                    .done(function (allFolders) {

                        var myFolders = allFolders.filter(function (folder) {

                            return acceptedIDs.indexOf(folder.id) > -1;
                        });

                        deferred.resolve(myFolders);
                    })
                    .fail(deferred.reject, deferred);
            })
            .fail(deferred.reject, deferred);

        return deferred.promise();
    },

    /**
     * Validates subtask creation data.
     * @param {object} data - Subtask data.
     */
    'validateCreateData': function (data) {

        data = data || {};
        assert(data.title, 'Title is required for folder creation.');
    }
});
